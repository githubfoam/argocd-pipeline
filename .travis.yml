---
sudo: required
dist: bionic
notifications:
  slack:
    on_failure: always
matrix:
  fast_finish: true
  include:

# https://github.com/MISP/MISP/blob/2.4/docs/INSTALL.ubuntu2004.md
# https://misp.github.io/MISP/INSTALL.ubuntu2004/
    - name: "deploy MISP  wo snaps on focal(Ubuntu 20.04-server) amd64"
      dist: focal
      arch: amd64     
      language: python
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        - wget -O /tmp/INSTALL.sh https://raw.githubusercontent.com/MISP/MISP/2.4/INSTALL/INSTALL.sh
        - bash /tmp/INSTALL.sh -c       
      after_success:
        - deactivate

# https://github.com/MISP/MISP/blob/2.4/docs/INSTALL.ubuntu1804.md
# https://misp.github.io/MISP/INSTALL.ubuntu1804/
    - name: "deploy MISP  wo snaps on bionic(Ubuntu 18.04.4-server) amd64"
      dist: bionic
      arch: amd64     
      language: python
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        # Please check the installer options first to make the best choice for your install
        - wget -O /tmp/INSTALL.sh https://raw.githubusercontent.com/MISP/MISP/2.4/INSTALL/INSTALL.sh
        - bash /tmp/INSTALL.sh      
        # This will install MISP Core
        - wget -O /tmp/INSTALL.sh https://raw.githubusercontent.com/MISP/MISP/2.4/INSTALL/INSTALL.sh
        - bash /tmp/INSTALL.sh -c       
      after_success:
        - deactivate

# https://airflow.apache.org/docs/stable/installation.html
    - name: "deploy Airflow 1.10.12  wo snaps on bionic(Ubuntu 18.04.4-server) amd64"
      dist: bionic
      arch: amd64  
      sudo: required   
      language: python
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        - sudo apt-get update -qq
        - sudo apt-get install -qqy build-essential
        - pip install \
          apache-airflow==1.10.12 \
          --constraint "https://raw.githubusercontent.com/apache/airflow/constraints-1.10.12/constraints-3.7.txt"      
      after_success:
        - deactivate

# https://airflow.apache.org/docs/stable/installation.html
    - name: "deploy Airflow 1.10.12 with extras wo snaps on bionic(Ubuntu 18.04.4-server) amd64"
      dist: bionic
      arch: amd64  
      sudo: required   
      language: python
      before_install:
        - pip3 install virtualenv
        - virtualenv -p $(which python3) ~venvpy3
        - source ~venvpy3/bin/activate
        - pip install -r requirements.txt
      script:
        - sudo apt-get update -qq
        - sudo apt-get install -qqy build-essential
        - pip install \
          apache-airflow[postgres,gcp]==1.10.12 \
          --constraint "https://raw.githubusercontent.com/apache/airflow/constraints-1.10.12/constraints-3.7.txt"
      after_success:
        - deactivate

#     - name: "deploy argo cd  w snaps on focal amd64"
#       dist: focal
#       arch: amd64
#       addons:
#         snaps:
#           - name: kubectl
#             confinement: classic # or devmode
#             channel: latest/stable # will be passed to --channel flag
#           - name: helm
#             confinement: classic # or devmode
#             channel: latest/stable # will be passed to --channel flag      
#       language: python
#       # python: 3.7
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#         - pip install -r requirements.txt
#       script:
#         - sudo make deploy-kind
#         - sudo kind create cluster --name tutorial-cluster
#         - sudo kubectl config use-context kind-tutorial-cluster
#         - sudo make deploy-argocd
#         - sudo kind delete cluster --name tutorial-cluster        
#       after_success:
#         - deactivate

#     - name: "deploy argo cd  w snaps on bionic amd64"
#       dist: bionic
#       arch: amd64
#       addons:
#         snaps:
#           - name: kubectl
#             confinement: classic # or devmode
#             channel: latest/stable # will be passed to --channel flag
#           - name: helm
#             confinement: classic # or devmode
#             channel: latest/stable # will be passed to --channel flag      
#       language: python
#       # python: 3.7
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#         - pip install -r requirements.txt
#       script:
#         - sudo make deploy-kind
#         - sudo kind create cluster --name tutorial-cluster
#         - sudo kubectl config use-context kind-tutorial-cluster
#         - sudo make deploy-argocd
#         - sudo kind delete cluster --name tutorial-cluster        
#       after_success:
#         - deactivate

# # The HTTP call equal to 'curl -sSL http://localhost:10248/healthz' failed with error: Get http://localhost:10248/healthz: dial tcp
#     # - name: "deploy argo cd  wo snaps on focal amd64"
#     #   dist: focal
#     #   arch: amd64
#     #   language: python
#     #   # python: 3.7
#     #   before_install:
#     #     - pip3 install virtualenv
#     #     - virtualenv -p $(which python3) ~venvpy3
#     #     - source ~venvpy3/bin/activate
#     #     - pip install -r requirements.txt
#     #   script:
#     #     - sudo make deploy-minikube-latest
#     #     - sudo make deploy-argocd
#     #   after_success:
#     #     - deactivate

# # TESTED OK
#     - name: "deploy argo cd  wo snaps on bionic amd64"
#       dist: bionic
#       arch: amd64
#       language: python
#       # python: 3.7
#       before_install:
#         - pip3 install virtualenv
#         - virtualenv -p $(which python3) ~venvpy3
#         - source ~venvpy3/bin/activate
#         - pip install -r requirements.txt
#       script:
#         - sudo make deploy-minikube-latest
#         - sudo make deploy-argocd
#       after_success:
#         - deactivate
